<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hexo博客搭建记录</title>
    <url>/2021/01/05/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h4 id="安装hexo完成初始化配置"><a href="#安装hexo完成初始化配置" class="headerlink" title="安装hexo完成初始化配置"></a>安装hexo完成初始化配置</h4><h5 id="安装Nodejs"><a href="#安装Nodejs" class="headerlink" title="安装Nodejs"></a>安装Nodejs</h5><p><code>node -v</code>    #查看node版本<br><code>npm -v</code>    #查看npm版本<br><code>npm install -g cnpm --registry=http://registry.npm.taobao.org</code>    #安装淘宝的cnpm 管理器<br><code>cnpm -v</code>    # 查看cnpm版本<br><code>cnpm install -g hexo-cli</code>    #安装hexo框架<br><code>hexo -v</code>    #查看hexo版本<br><code>mkdir blog</code>    #创建blog目录<br><code>cd blog</code>     #进入blog目录<br><code>sudo hexo init</code>     #生成博客 初始化博客<br><code>hexo s</code>    #启动本地博客服务<br><code>http://localhost:4000/</code>    #本地访问地址<br><code>hexo n &quot;我的第一篇文章&quot;</code> #创建新的文章 </p>
<h5 id="返回blog目录"><a href="#返回blog目录" class="headerlink" title="返回blog目录"></a>返回blog目录</h5><p><code>hexo clean</code> #清理<br><code>hexo g</code> #生成</p>
<h5 id="Github创建一个新的仓库-YourGithubName-github-io"><a href="#Github创建一个新的仓库-YourGithubName-github-io" class="headerlink" title="Github创建一个新的仓库 YourGithubName.github.io"></a>Github创建一个新的仓库 YourGithubName.github.io</h5><p><code>cnpm install --save hexo-deployer-git</code> #在blog目录下安装git部署插件</p>
<h5 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置_config.yml"></a>配置_config.yml</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line"> deploy:</span><br><span class="line">   type: git</span><br><span class="line">   repo: https:&#x2F;&#x2F;github.com&#x2F;YourGithubName&#x2F;YourGithubName.github.io.git</span><br><span class="line">   branch: master</span><br></pre></td></tr></table></figure>
<p><code>hexo d</code>    #部署到Github仓库里<br><code>https://YourGithubName.github.io/</code>  #访问这个地址可以查看博客</p>
<h5 id="配置next主题"><a href="#配置next主题" class="headerlink" title="配置next主题"></a>配置next主题</h5><p><code>git clone https://github.com/iissnan/hexo-theme-next.git themes/next</code> #下载next主题到本地,这个主题直接带全文内容搜索,界面比较简洁</p>
<p><img src="https://cdn.jsdelivr.net/gh/wppro85/blog_img@main/images/20210106-image-20210106092140528.png" alt="image-20210106092140528" style="zoom:25%;" /></p>
<p>#修改hexo根目录下的 _config.yml 文件 ： theme: next</p>
<p><code>hexo c</code>    #清理一下<br><code>hexo g</code>    #生成<br><code>hexo d</code>    #部署到远程Github仓库<br><code>https://YourGithubName.github.io/</code>  #查看博客</p>
<h4 id="uPic图床设置-token添加"><a href="#uPic图床设置-token添加" class="headerlink" title="uPic图床设置 token添加"></a>uPic图床设置 token添加</h4><h4 id="关于阿里云域名解析的设置"><a href="#关于阿里云域名解析的设置" class="headerlink" title="关于阿里云域名解析的设置"></a>关于阿里云域名解析的设置</h4><p><img src="https://cdn.jsdelivr.net/gh/wppro85/blog_img@main/uPic/rCct52.png" alt="rCct52"></p>
<p>阿里云上这样设置(更新时间还是比较长的 一开始ping域名ping不同,后来还是ping不同,但是访问正常,以为设置不对,也不知道怎么处理,直接放了一天自动就好了,访问正常,域名定向也正常)</p>
<p>github进入项目页面 选择Settings</p>
<p><img src="https://cdn.jsdelivr.net/gh/wppro85/blog_img@main/images/20210105-bVsnaT.png" alt="20210105-bVsnaT"></p>
<p>项目目录下会自动生成CNAME文件,内容就是绑定的域名</p>
<p>这里需要注意本地blog(hexo项目)文件夹下 必须在source目录(不是source/_posts目录)下保持CNAME文件与github一致,否则每次更新都会删除 github的CNAME文件,造成域名定向失败.</p>
<h4 id="通过github多设备管理hexo内容"><a href="#通过github多设备管理hexo内容" class="headerlink" title="通过github多设备管理hexo内容"></a>通过github多设备管理hexo内容</h4><p>参考文件:  </p>
<ol>
<li><a href="https://blog.csdn.net/u014568993/article/details/84308188">https://blog.csdn.net/u014568993/article/details/84308188</a>  </li>
<li><a href="https://www.jianshu.com/p/0558c041e56d">https://www.jianshu.com/p/0558c041e56d</a>  <blockquote>
<ol>
<li>hexo new <blog-title> #撰写博客</li>
<li>hexo s -g （本地查看是否正常）</li>
<li>hexo d （将本地文件push到master分支上）</li>
<li>hexo clean(清除不必要文件)</li>
<li>git add .、 git commit -m “comment” 、 git push （将hexog分支保存为最新状态）</li>
</ol>
</blockquote>
<h5 id="这里正好有个配置的问题一并记录："><a href="#这里正好有个配置的问题一并记录：" class="headerlink" title="这里正好有个配置的问题一并记录："></a>这里正好有个配置的问题一并记录：</h5>我是用的manjaro i3系统 终端使用了fish 和zsh 默认fish<br>git clone成功以后,无法直接使用hexo命令，经过查询应该将~/hexo/node_modules/.bin目录加入PATH  <h4 id="zsh-bash添加环境变量"><a href="#zsh-bash添加环境变量" class="headerlink" title="zsh,bash添加环境变量:"></a>zsh,bash添加环境变量:</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nvim ~&#x2F;.zshrc</span><br><span class="line">nvim ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure>
添加以下内容:<br><code>export PATH=$PATH:~/hexo/node_modules/.bin</code>  <h4 id="fish添加环境变量"><a href="#fish添加环境变量" class="headerlink" title="fish添加环境变量"></a>fish添加环境变量</h4>参考内容: <a href="https://stackoverflow.com/questions/26208231/modifying-path-with-fish-shell">https://stackoverflow.com/questions/26208231/modifying-path-with-fish-shell</a><br><code>set -U fish_user_paths ~/hexo/node_modules/.bin $fish_user_paths</code></li>
</ol>
<h5 id="新的设备hexo-clean-和hexo-d有两个错误"><a href="#新的设备hexo-clean-和hexo-d有两个错误" class="headerlink" title="新的设备hexo clean 和hexo d有两个错误"></a>新的设备hexo clean 和hexo d有两个错误</h5><ol>
<li>通过删除 ~/hexo/node_modules目录，重新安装相关依赖解决<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-archive --save</span><br><span class="line">npm install hexo-generator-category --save</span><br><span class="line">npm install hexo-generator-tag --save</span><br><span class="line">npm install hexo-server --save</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-deployer-heroku --save</span><br><span class="line">npm install hexo-deployer-rsync --save</span><br><span class="line">npm install hexo-deployer-openshift --save</span><br><span class="line">npm install hexo-renderer-marked@0.2 --save</span><br><span class="line">npm install hexo-renderer-stylus@0.2 --save</span><br><span class="line">npm install hexo-generator-feed@1 --save</span><br><span class="line">npm install hexo-generator-sitemap@1 --save</span><br><span class="line">npm install hexo-generator-search --save</span><br><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></li>
<li>当出现类似下面的信息时，直接删除.deploy_git文件夹，然后执行hexo d即可，其会重新生成的。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">fatal: 位于未检出的子模组 &#39;.deploy_git&#39;</span><br><span class="line">Maybe you can find the solution here: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;troubleshooting.html</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure>
删除后提示 找不到有效的邮箱、用户名:<br>通过一下命令设置全局的用户名 邮箱  </li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name [username]</span><br><span class="line">git config --global user.email [email]</span><br></pre></td></tr></table></figure>
<p>每次提交还需要输入github用户名和密码：<br>通过以下命令进行修改<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;[credential]&quot; &gt;&gt; .git&#x2F;config</span><br><span class="line">echo &quot;    helper &#x3D; store&quot; &gt;&gt; .git&#x2F;config</span><br></pre></td></tr></table></figure><br>或者直接修改.git/config文件<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">##修改成如下</span><br><span class="line">[core]</span><br><span class="line">	repositoryformatversion &#x3D; 0</span><br><span class="line">	filemode &#x3D; true</span><br><span class="line">	bare &#x3D; false</span><br><span class="line">	logallrefupdates &#x3D; true</span><br><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">	url &#x3D; https:&#x2F;&#x2F;github.com&#x2F;wppro85&#x2F;wppro85.github.io.git</span><br><span class="line">	fetch &#x3D; +refs&#x2F;heads&#x2F;*:refs&#x2F;remotes&#x2F;origin&#x2F;*</span><br><span class="line">[branch &quot;hexo&quot;]</span><br><span class="line">	remote &#x3D; origin</span><br><span class="line">	merge &#x3D; refs&#x2F;heads&#x2F;hexo</span><br><span class="line">[credential]</span><br><span class="line">    helper &#x3D; store</span><br></pre></td></tr></table></figure><br>我这次使用了hexo目录下的.git配置是无效的,然后使用了全局的修改后才可以免输入用户名密码  </p>
<h5 id="设置全局的方式"><a href="#设置全局的方式" class="headerlink" title="设置全局的方式:"></a>设置全局的方式:</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure>
<h5 id="或者修改用户目录下的-gitconfig文件"><a href="#或者修改用户目录下的-gitconfig文件" class="headerlink" title="或者修改用户目录下的.gitconfig文件:"></a>或者修改用户目录下的.gitconfig文件:</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[credential]</span><br><span class="line">    helper &#x3D; sotre</span><br></pre></td></tr></table></figure>
<h4 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容:"></a>参考内容:</h4><p><a href="https://www.bilibili.com/video/BV1Yb411a7ty">https://www.bilibili.com/video/BV1Yb411a7ty</a><br><a href="https://zhuanlan.zhihu.com/p/138012354">https://zhuanlan.zhihu.com/p/138012354</a><br><a href="https://blog.svend.cc/upic/tutorials/github/">https://blog.svend.cc/upic/tutorials/github/</a></p>
]]></content>
      <tags>
        <tag>hexo,github,upic,阿里云域名</tag>
      </tags>
  </entry>
  <entry>
    <title>关于markdown-preview.nvim安装失败的解决方法</title>
    <url>/2021/01/05/%E5%85%B3%E4%BA%8Emarkdown-preview-nvim%E5%AE%89%E8%A3%85%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h5 id="mac下采用了官方的配置文件进行安装a-即使挂了代理也无法安装成功"><a href="#mac下采用了官方的配置文件进行安装a-即使挂了代理也无法安装成功" class="headerlink" title="mac下采用了官方的配置文件进行安装a,即使挂了代理也无法安装成功"></a>mac下采用了官方的配置文件进行安装a,即使挂了代理也无法安装成功</h5><p><code>Plug &#39;iamcco/markdown-preview.nvim&#39;, &#123; &#39;do&#39;: &#39;cd app &amp;&amp; yarn install&#39;  &#125;</code>  </p>
<h5 id="经过排查mac一开始没有安装yarn-尝试了"><a href="#经过排查mac一开始没有安装yarn-尝试了" class="headerlink" title="经过排查mac一开始没有安装yarn,尝试了"></a>经过排查mac一开始没有安装yarn,尝试了</h5><p><code>brew install yarn</code>  </p>
<h5 id="安装后依然无法安装成功markdown-preview-等待时间较长-尝试了以下方法"><a href="#安装后依然无法安装成功markdown-preview-等待时间较长-尝试了以下方法" class="headerlink" title="安装后依然无法安装成功markdown-preview,等待时间较长,尝试了以下方法:"></a>安装后依然无法安装成功markdown-preview,等待时间较长,尝试了以下方法:</h5><ol>
<li>克隆完成后,进入plugin目录<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yarn install</span><br></pre></td></tr></table></figure></li>
<li>使用终端代理proxychains4 启动nvim 挂代理安装插件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxychains4 nvim   </span><br><span class="line">PlugInstall</span><br></pre></td></tr></table></figure>
安装后成功,再次启动nvim打开markdown文件:MarkdownPreview可以正常启动浏览器进行预览了</li>
</ol>
]]></content>
      <tags>
        <tag>vim,neovim,markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>安装i3版本manjaro的安装记录</title>
    <url>/2021/01/05/i3-manjaro%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h4 id="解决外接机械键盘功能键区无法使用的问题"><a href="#解决外接机械键盘功能键区无法使用的问题" class="headerlink" title="解决外接机械键盘功能键区无法使用的问题"></a>解决外接机械键盘功能键区无法使用的问题</h4><p><strong>参考文件</strong>:<br>How to swap the “fn” use of Function keys on an Apple Keyboard in Linux<br><a href="https://superuser.com/questions/79822/how-to-swap-the-fn-use-of-function-keys-on-an-apple-keyboard-in-linux">https://superuser.com/questions/79822/how-to-swap-the-fn-use-of-function-keys-on-an-apple-keyboard-in-linux</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo 0 &gt; &#x2F;sys&#x2F;module&#x2F;hid_apple&#x2F;parameters&#x2F;fnmode</span><br></pre></td></tr></table></figure><br>Or, in case of permission issue:<br><code>echo 0 | sudo tee /sys/module/hid_apple/parameters/fnmode</code></p>
<p>This will prevent you from having to reboot. Adding the option is a good idea, so the change persists through reboots.<br>0 = Fn key disabled<br>1 = Fn key pressed by default<br>2 = Fn key released by default<br>From <code>/drivers/hid/hid-apple.c</code> line 42:<br>   Mode of fn key on Apple keyboards (0 = disabled, [1] = fkeyslast, 2 = fkeysfirst) </p>
<p>his worked for me on <strong>Fedora 24</strong> Create a new file for SystemD to start.<br><code>gedit /usr/lib/systemd/system/mac-keyboard.service</code><br><strong>Ensure the file contains the following</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line"> Description&#x3D;mac-keyboard</span><br><span class="line">[Service]</span><br><span class="line"> Type&#x3D;oneshot</span><br><span class="line"> ExecStart&#x3D;&#x2F;bin&#x2F;sh -c &quot;echo 2 &gt; &#x2F;sys&#x2F;module&#x2F;hid_apple&#x2F;parameters&#x2F;fnmode&quot;</span><br><span class="line"> ExecStop&#x3D;&#x2F;bin&#x2F;sh -c &quot;echo 1 &gt; &#x2F;sys&#x2F;module&#x2F;hid_apple&#x2F;parameters&#x2F;fnmode&quot;</span><br><span class="line"> RemainAfterExit&#x3D;yes</span><br><span class="line">[Install]</span><br><span class="line"> WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure></p>
<ol>
<li>Reload SystemD to read your new file<br><code>systemctl --system daemon-reload</code>  </li>
<li>Start the SystemD service.<br><code>systemctl start mac-keyboard.service</code>  </li>
<li>Enable service to start on boot.<br><code>systemctl enable mac-keyboard.service</code><br>Reference: <a href="https://www.dalemacartney.com/2013/06/14/changing-the-default-function-key-behaviour-in-fedora/">https://www.dalemacartney.com/2013/06/14/changing-the-default-function-key-behaviour-in-fedora/</a></li>
</ol>
<p><strong>按照文件选择</strong>  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo 2 | sudo tee &#x2F;sys&#x2F;module&#x2F;hid_apple&#x2F;parameters&#x2F;fnmode</span><br></pre></td></tr></table></figure>
<p>开启F区标准键盘功能<br>mod+z 选择 manjaro setting manager<br>键盘布局选择apple,功能键就可以正常使用了(我这里使用的k2键盘有mac的键盘布局模式)</p>
<h4 id="解决蓝牙链接问题"><a href="#解决蓝牙链接问题" class="headerlink" title="解决蓝牙链接问题"></a>解决蓝牙链接问题</h4><p>参考文件:<br><a href="https://www.cnblogs.com/lirenhe/p/12716395.html">https://www.cnblogs.com/lirenhe/p/12716395.html</a><br><a href="https://blog.csdn.net/github_39664893/article/details/88758120">https://blog.csdn.net/github_39664893/article/details/88758120</a></p>
<h4 id="科学上网方案"><a href="#科学上网方案" class="headerlink" title="科学上网方案"></a>科学上网方案</h4><p>v2ray 命令行工具 安装方式:<code>sudo pacman -S v2ray</code><br>Qv2ray 图形化支持订阅 安装方式:<code>yay  -S Qv2ray</code><br>终端代理工具proxychains 安装方式:<code>sudo pacman -S proxychins</code><br>修改proxychains配置文件:<br><code>sudo vim /etc/proxychains.conf</code><br>修改以下内容:<br><code>socks4 127.0.0.1 1089</code>(根据v2ray 配置情况 默认1089端口)</p>
<h4 id="HDMI没有声音的问题"><a href="#HDMI没有声音的问题" class="headerlink" title="HDMI没有声音的问题"></a>HDMI没有声音的问题</h4><p><a href="https://wiki.archlinux.org/index.php/PulseAudio/Examples#Overview_of_the_targeted_PulseAudio_configuration">https://wiki.archlinux.org/index.php/PulseAudio/Examples#Overview_of_the_targeted_PulseAudio_configuration</a>  </p>
<h5 id="HDMI-output-configuration的相关部分"><a href="#HDMI-output-configuration的相关部分" class="headerlink" title="HDMI output configuration的相关部分"></a>HDMI output configuration的相关部分</h5><p><code>aplay -D plughw:1,3 /usr/share/sounds/alsa/Front_Right.wav</code></p>
<h5 id="Manually-configuring-PulseAudio-to-detect-the-Nvidia-HDMI"><a href="#Manually-configuring-PulseAudio-to-detect-the-Nvidia-HDMI" class="headerlink" title="Manually configuring PulseAudio to detect the Nvidia HDMI"></a>Manually configuring PulseAudio to detect the Nvidia HDMI</h5><p>Having identified which HDMI device is working, PulseAudio can be forced to use it via an edit to <code>/etc/pulse/default.pa</code>:<br><code># load-module module-alsa-sink device=hw:1,7</code><br>where the 1 is the card and the 7 is the device found to work in the previous section restart pulse audio<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ pulseaudio -k</span><br><span class="line">$ pulseaudio --start</span><br></pre></td></tr></table></figure></p>
<h5 id="Automatically-switch-audio-to-HDMI"><a href="#Automatically-switch-audio-to-HDMI" class="headerlink" title="Automatically switch audio to HDMI"></a>Automatically switch audio to HDMI</h5><p>Create a script to switch to the desired audio profile if an HDMI cable is plugged in:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;hdmi_sound_toggle.sh</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"></span><br><span class="line">export PATH&#x3D;&#x2F;usr&#x2F;bin</span><br><span class="line"></span><br><span class="line">USER_NAME&#x3D;$(who | awk -v vt&#x3D;tty$(fgconsole) &#39;$0 ~ vt &#123;print $1&#125;&#39;)</span><br><span class="line">USER_ID&#x3D;$(id -u &quot;$USER_NAME&quot;)</span><br><span class="line">CARD_PATH&#x3D;&quot;&#x2F;sys&#x2F;class&#x2F;drm&#x2F;card0&#x2F;&quot;</span><br><span class="line">AUDIO_OUTPUT&#x3D;&quot;analog-surround-40&quot;</span><br><span class="line">PULSE_SERVER&#x3D;&quot;unix:&#x2F;run&#x2F;user&#x2F;&quot;$USER_ID&quot;&#x2F;pulse&#x2F;native&quot;</span><br><span class="line"></span><br><span class="line">for OUTPUT in $(cd &quot;$CARD_PATH&quot; &amp;&amp; echo card*); do</span><br><span class="line">  OUT_STATUS&#x3D;$(&lt;&quot;$CARD_PATH&quot;&#x2F;&quot;$OUTPUT&quot;&#x2F;status)</span><br><span class="line">  if [[ $OUT_STATUS &#x3D;&#x3D; connected ]]</span><br><span class="line">  then</span><br><span class="line">    echo $OUTPUT connected</span><br><span class="line">    case &quot;$OUTPUT&quot; in</span><br><span class="line">      &quot;card0-HDMI-A-1&quot;)</span><br><span class="line">        AUDIO_OUTPUT&#x3D;&quot;hdmi-stereo&quot; # Digital Stereo (HDMI 1)</span><br><span class="line">     ;;</span><br><span class="line">      &quot;card0-HDMI-A-2&quot;)</span><br><span class="line">        AUDIO_OUTPUT&#x3D;&quot;hdmi-stereo-extra1&quot; # Digital Stereo (HDMI 2)</span><br><span class="line">     ;;</span><br><span class="line">    esac</span><br><span class="line">  fi</span><br><span class="line">done</span><br><span class="line">echo selecting output $AUDIO_OUTPUT</span><br><span class="line">sudo -u &quot;$USER_NAME&quot; pactl --server &quot;$PULSE_SERVER&quot; set-card-profile 0 output:$AUDIO_OUTPUT+input:analog-stereo</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>Make the script executable:<br><code>chmod +x /usr/local/bin/hdmi_sound_toggle.sh</code><br>Create a udev rule to run this script when the status of the HDMI change:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;udev&#x2F;rules.d&#x2F;99-hdmi_sound.rules</span><br><span class="line">KERNEL&#x3D;&#x3D;&quot;card0&quot;, SUBSYSTEM&#x3D;&#x3D;&quot;drm&quot;, ACTION&#x3D;&#x3D;&quot;change&quot;, RUN+&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;hdmi_sound_toggle.sh&quot;</span><br></pre></td></tr></table></figure><br>To make the change effective don’t forget to reload the udev rules:<br><code>udevadm control --reload-rules</code><br>A reboot might be required. </p>
<h4 id="中文显示问题"><a href="#中文显示问题" class="headerlink" title="中文显示问题"></a>中文显示问题</h4><p>当前最新版本(manjaro-i3-20.0-200426-linux56)在安装时中文无法正常显示，可以选择英文提示安装，我是选择的中文，然后看着一堆方块猜着输入信息，然后点下一步下一步完成的．安装完成后首次进入系统，你会发现桌面右上角日历上显示的＂x月,星期x”的中文字符显示为方块，你需要修改配置文件/usr/share/conky/conky_maia把其中默认的字体＂Bitstream Vera＂改为＂anti＂还有浏览器的标题或其他软件显示中文还会有问题，这时就需要安装新的中文字体解决</p>
<h5 id="安装完你发现conky貌似有口口口这样的缺少字体"><a href="#安装完你发现conky貌似有口口口这样的缺少字体" class="headerlink" title="安装完你发现conky貌似有口口口这样的缺少字体"></a>安装完你发现conky貌似有口口口这样的缺少字体</h5><p><code>/usr/share/conky/conky_maia</code>    #桌面右侧的状态栏<br><code>/usr/share/conky/conky1.10_shortcuts_maia</code>    #桌面左侧的快捷键显示栏<br><strong>修改conky_maia支持中文</strong><br><code>font = &#39;WenQuanYi Micro Hei:size=8&#39;,</code>或者<br><code>font = &#39;WenQuanYi Zen Hei:size=8&#39;,</code><br>vim打开可以用以下命令直接替换<br><code>:%s/Bitstrea‘m Vera/WenQuanYi Micro Hei/</code></p>
<h4 id="修改键盘映射"><a href="#修改键盘映射" class="headerlink" title="修改键盘映射"></a>修改键盘映射</h4><p>xmodmap -pke -&gt; ·/.xmodmap 输出键盘每个键位对应的<br>xev<br>xmodmap ~/.xmodmap<br>配置和文件 需要在 i3 config文件中添加<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exec_always sleep1; xmodmap ~&#x2F;.xmodmap</span><br><span class="line">exec_always variety</span><br><span class="line">exec_always compton</span><br></pre></td></tr></table></figure></p>
<h4 id="fzf-模糊文件"><a href="#fzf-模糊文件" class="headerlink" title="fzf 模糊文件"></a>fzf 模糊文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export FZF_DEFAULT_OPTS&#x3D;&quot;--height 40% --layout&#x3D;reverse --preview &#39;(highlight -O ansi &#123;&#125; || cat &#123;&#125;) 2&gt; &#x2F;dev&#x2F;null | head -500&#39;&quot;</span><br></pre></td></tr></table></figure>
<h4 id="lin-vim"><a href="#lin-vim" class="headerlink" title="lin.vim"></a>lin.vim</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;linrongbin16&#x2F;lin.vim ~&#x2F;.vim &amp;&amp; cd ~&#x2F;.vim &amp;&amp; .&#x2F;install.sh</span><br></pre></td></tr></table></figure>
<h4 id="tmux环境中nvim-checkhealth-检查问题解决方式"><a href="#tmux环境中nvim-checkhealth-检查问题解决方式" class="headerlink" title="tmux环境中nvim checkhealth 检查问题解决方式"></a>tmux环境中nvim checkhealth 检查问题解决方式</h4><p>在 macOS 中，我们<a href="https://www.iterm2.com/">iTerm2</a>中的 terminal color 一般都设置为<code>xterm-256color</code>，这没毛病，但问题是它不能在 tmux 环境中使用:<code>$TERM should be &quot;screen-256color&quot; or &quot;tmux-256color&quot; in tmux. Colors might look wrong.</code></p>
<p>为此，我们可以在<a href="https://github.com/at7h/dots/blob/master/zsh/zshrc#L109">zshrc</a>中加上这样一段配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if [[ $TMUX !&#x3D; &quot;&quot; ]] then</span><br><span class="line">export TERM&#x3D;&quot;tmux-256color&quot;</span><br><span class="line">else</span><br><span class="line">export TERM&#x3D;&quot;xterm-256color&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
<p>而在 tmux 环境中一般默认使用系统自带的<code>screen-256color</code>，这在大多数情况是够用的，但是它不支持任何斜体字体样式，所以在 Vim 中类似代码高亮这种就会很有问题。<br>为此，我们可以在<a href="https://github.com/at7h/dots/blob/master/tmux/tmux.conf.local#L7">tmux.conf</a>中加上设置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set -g default-terminal &quot;tmux-256color&quot;</span><br><span class="line">set-option -a terminal-overrides &quot;,*256col*:RGB&quot;</span><br></pre></td></tr></table></figure>
<h4 id="小工具"><a href="#小工具" class="headerlink" title="小工具"></a>小工具</h4><p>下载：t-get (命令行工具， npm install -g t-get)<br>虚拟机：VirtualBox<br>模拟器：qemu, bochs<br>快速跳转工具: z一个目录跳转工具，相当于加强版的<code>cd</code>，首先去<a href="https://github.com/rupa/z">戳这里</a>下载，是一个脚本，接着添加到<code>~/.zshrc</code>中：</p>
<h4 id="开发工具配置"><a href="#开发工具配置" class="headerlink" title="开发工具配置"></a>开发工具配置</h4><p><a href="https://zhuanlan.zhihu.com/p/139388970">https://zhuanlan.zhihu.com/p/139388970</a></p>
<h4 id="Linux终端PATH配置方式"><a href="#Linux终端PATH配置方式" class="headerlink" title="Linux终端PATH配置方式"></a>Linux终端PATH配置方式</h4><h5 id="zsh-bash添加环境变量"><a href="#zsh-bash添加环境变量" class="headerlink" title="zsh,bash添加环境变量:"></a>zsh,bash添加环境变量:</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nvim ~&#x2F;.zshrc</span><br><span class="line">nvim ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure>
<p>添加以下内容:<br><code>export PATH=$PATH:~/hexo/node_modules/.bin</code></p>
<h5 id="fish添加环境变量"><a href="#fish添加环境变量" class="headerlink" title="fish添加环境变量"></a>fish添加环境变量</h5><p>参考内容: <a href="https://stackoverflow.com/questions/26208231/modifying-path-with-fish-shell">https://stackoverflow.com/questions/26208231/modifying-path-with-fish-shell</a><br><code>set -U fish_user_paths ~/hexo/node_modules/.bin $fish_user_paths</code></p>
<h4 id="google-chrome浏览器无法在manjaro下设置代理"><a href="#google-chrome浏览器无法在manjaro下设置代理" class="headerlink" title="google-chrome浏览器无法在manjaro下设置代理"></a>google-chrome浏览器无法在manjaro下设置代理</h4><p>Firefox,可以设置全局代理,通过qv2ray进行代理即可正常访问google<br>Chrome、Chromium无法设置系统代理,必须通过插件或者命令行</p>
<h6 id="方式一-通过命令行启动代理上网-google-chrome-stable-proxy-server-socks5-127-0-0-1-1089"><a href="#方式一-通过命令行启动代理上网-google-chrome-stable-proxy-server-socks5-127-0-0-1-1089" class="headerlink" title="方式一:通过命令行启动代理上网  google-chrome-stable --proxy-server=socks5://127.0.0.1:1089"></a>方式一:通过命令行启动代理上网  <code>google-chrome-stable --proxy-server=socks5://127.0.0.1:1089</code></h6><h6 id="方式二-通过switchy-omega插件进行科学上网"><a href="#方式二-通过switchy-omega插件进行科学上网" class="headerlink" title="方式二:通过switchy omega插件进行科学上网"></a>方式二:通过switchy omega插件进行科学上网</h6><ol>
<li>通过github下载google-access 谷访访问助手破解手,启动插件,登陆同步  </li>
<li>同步Chrome浏览器插件(包括proxy switchy omega)  </li>
<li>SwitchyOmega设置:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   网址协议:(默认)</span><br><span class="line">   代理方式SOCKS </span><br><span class="line">   代理服务器:127.0.0.1 </span><br><span class="line">   代理端口:1089</span><br><span class="line">&#96;&#96;&#96;  </span><br><span class="line">PAC规则在Qv2ray进行设置,一开始两种方式都报错,始终不能代理访问成功.  </span><br><span class="line">最终发现是**本地时间**不对,调整完成后就正常了. </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 蓝牙配对失败的问题 手动命令行配对</span><br><span class="line">Manjaro默认的蓝牙总会有点小问题！所以在安装好Manjaro后如下设置下：  </span><br><span class="line">一、安装  </span><br><span class="line">基本的包  </span><br><span class="line">&#96;&#96;&#96;pacman -S bluez bluez-utils&#96;&#96;&#96;  </span><br><span class="line">与音频有关的包</span><br></pre></td></tr></table></figure>
pacman -S pulseaudio-bluetooth pavucontrol pulseaudio-alsa pulseaudio-bluetooth-a2dp-gdm-fix<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">二、修改设置</span><br></pre></td></tr></table></figure>
sudo nano /etc/bluetooth/main.conf<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改FastConnectable&#x3D;false，取消#注释，改为FastConnectable&#x3D;true  </span><br><span class="line">修改AutoEnable&#x3D;false，去掉前面的#注释，改为AutoEnable&#x3D;true</span><br><span class="line">重启！！！</span><br><span class="line"></span><br><span class="line">三、连接蓝牙设备  </span><br><span class="line">不知道为什么Manjaro下的配对码显示不出来，所以我们的控制台下进行连接配对操作：  </span><br><span class="line">1、进入蓝牙控制台  </span><br><span class="line">&#96;bluetoothctl&#96;  </span><br><span class="line">2、打开相关项</span><br></pre></td></tr></table></figure>
power on<br>agent on<br>default-agent<br><code>`</code><br>3、扫描蓝牙设备<br><code>scan on</code><br>4、根据上面来找出来的蓝牙MAC码，对设备配对pair 键盘的MAC地址（可用TAB自动出来）屏幕可能会输出类似于以下的信息：</li>
</ol>
<p><code>[agent] Passkey: xxxxxx</code><br>这时候在你的蓝牙键盘上输入6位配对码后再回车即可完成配对！<br>5、设备信任设备<br><code>trust 键盘的MAC地址</code><br>6、连接设备<br>connect 键盘的MAC地址<br><a href="https://peng.likehere.me/index.php/archives/41/">https://peng.likehere.me/index.php/archives/41/</a></p>
<h4 id="K380蓝牙键盘连接到manjaroF键功能设置默功能"><a href="#K380蓝牙键盘连接到manjaroF键功能设置默功能" class="headerlink" title="K380蓝牙键盘连接到manjaroF键功能设置默功能"></a>K380蓝牙键盘连接到manjaroF键功能设置默功能</h4><p><a href="https://github.com/jergusg/k380-function-keys-conf">https://github.com/jergusg/k380-function-keys-conf</a></p>
<h4 id="关于efi和grub启动失败修复的问题"><a href="#关于efi和grub启动失败修复的问题" class="headerlink" title="关于efi和grub启动失败修复的问题"></a>关于efi和grub启动失败修复的问题</h4><p>参考文件:<br>Manjaro UEFI 启动修复<br><a href="https://blog.mynoee.com/archives/146/">https://blog.mynoee.com/archives/146/</a><br>修复UEFI模式下Manjaro Linux启动问题<br><a href="https://blog.csdn.net/weixin_30826761/article/details/97554989">https://blog.csdn.net/weixin_30826761/article/details/97554989</a><br>UEFI - Install Guide<br><a href="https://serverfault.com/questions/3132/how-do-i-find-the-uuid-of-a-filesystem">https://serverfault.com/questions/3132/how-do-i-find-the-uuid-of-a-filesystem</a><br>How do I find the UUID of a filesystem<br><a href="https://serverfault.com/questions/3132/how-do-i-find-the-uuid-of-a-filesystem">https://serverfault.com/questions/3132/how-do-i-find-the-uuid-of-a-filesystem</a></p>
]]></content>
      <tags>
        <tag>i3,manjaro</tag>
      </tags>
  </entry>
  <entry>
    <title>neovim插件</title>
    <url>/2021/01/11/neovim%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h5 id="vimspector插件安装"><a href="#vimspector插件安装" class="headerlink" title="vimspector插件安装"></a>vimspector插件安装</h5><ol>
<li>修改~/.vim/setting-vim/vim-plug.vim文件,增加以下内容:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot; VimSpector</span><br><span class="line">Plug &#39;puremourning&#x2F;vimspector&#39;, &#123;&#39;do&#39;:&#39;.&#x2F;install_gadget.py --enable-python --enable-go --enable-bash&#39;&#125;</span><br><span class="line">Plug &#39;junegunn&#x2F;fzf&#39;, &#123;&#39;dir&#39;: &#39;~&#x2F;.vim&#x2F;plugged&#x2F;fzf&#39;, &#39;do&#39;: &#39;.&#x2F;install --all&#39; &#125;</span><br></pre></td></tr></table></figure></li>
<li>修改~/.vim/user.vim文件，增加以下内容:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot; 12.Vimspector</span><br><span class="line">&quot; let g:vimspector_enable_mappings &#x3D; &#39;HUMAN&#39;</span><br><span class="line">function! s:read_template_into_buffer(template)</span><br><span class="line">	&quot; has to be a function to avoid the extra space fzf#run insers otherwise</span><br><span class="line">	execute &#39;0r ~&#x2F;.vim&#x2F;vimspector_json&#x2F;&#39;.a:template</span><br><span class="line">endfunction</span><br><span class="line">command! -bang -nargs&#x3D;* LoadVimSpectorJsonTemplate call fzf#run(&#123;</span><br><span class="line">			\   &#39;source&#39;: &#39;ls -1 ~&#x2F;.vim&#x2F;vimspector_json&#39;,</span><br><span class="line">			\   &#39;down&#39;: 20,</span><br><span class="line">			\   &#39;sink&#39;: function(&#39;&lt;sid&gt;read_template_into_buffer&#39;)</span><br><span class="line">			\ &#125;)</span><br><span class="line">noremap &lt;leader&gt;vs :tabe .vimspector.json&lt;CR&gt;:LoadVimSpectorJsonTemplate&lt;CR&gt;</span><br><span class="line">sign define vimspectorBP text&#x3D;☛ texthl&#x3D;Normal</span><br><span class="line">sign define vimspectorBPDisabled text&#x3D;☞ texthl&#x3D;Normal</span><br><span class="line">sign define vimspectorPC text&#x3D;🔶 texthl&#x3D;SpellBad</span><br></pre></td></tr></table></figure>
这段主要是vimspector配置设置我没使用默认快捷键映射方案’HUMAN’或者’VISUAL_STUDIO’，F5等功能键键位在lin.vim已经有定义了  </li>
</ol>
<p>通过使用 <strong>‘leader + vs’</strong> 选择对应的模板文件在需要调试的文件夹下生成对应的配置文件  </p>
<ol start="3">
<li>这里需要在~/.vim/下新建<code>vimspector_json</code>文件夹，配置bash,python,go对应的模板文件<br><strong>python.json</strong>:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;adapters&quot;: &#123;</span><br><span class="line">    &quot;debugpy&quot;: &#123;</span><br><span class="line">      &quot;command&quot;: [&quot;python&quot;, &quot;-m&quot;, &quot;debugpy.adapter&quot;],</span><br><span class="line"></span><br><span class="line">      &quot;name&quot;: &quot;debugpy&quot;,</span><br><span class="line"></span><br><span class="line">      &quot;configuration&quot;: &#123;</span><br><span class="line">        &quot;python&quot;: &quot;python&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &quot;configurations&quot;: &#123;</span><br><span class="line">    &quot;run - debugpy&quot;: &#123;</span><br><span class="line">      &quot;adapter&quot;: &quot;debugpy&quot;,</span><br><span class="line"></span><br><span class="line">      &quot;configuration&quot;: &#123;</span><br><span class="line">        &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line"></span><br><span class="line">        &quot;type&quot;: &quot;python&quot;,</span><br><span class="line"></span><br><span class="line">        &quot;cwd&quot;: &quot;$&#123;workspaceRoot&#125;&quot;,</span><br><span class="line"></span><br><span class="line">        &quot;program&quot;: &quot;$&#123;file&#125;&quot;,</span><br><span class="line"></span><br><span class="line">        &quot;stopOnEntry&quot;: true,</span><br><span class="line"></span><br><span class="line">        &quot;console&quot;: &quot;integratedTerminal&quot;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      &quot;breakpoints&quot;: &#123;</span><br><span class="line">        &quot;exception&quot;: &#123;</span><br><span class="line">          &quot;raised&quot;: &quot;N&quot;,</span><br><span class="line"></span><br><span class="line">          &quot;uncaught&quot;: &quot;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<strong>shell.json</strong>:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;configurations&quot;: &#123;</span><br><span class="line">    &quot;run&quot;: &#123;</span><br><span class="line">      &quot;adapter&quot;: &quot;vscode-bash&quot;,</span><br><span class="line">      &quot;configuration&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &quot;shell&quot;,</span><br><span class="line">        &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">        &quot;cwd&quot;: &quot;$&#123;workspaceRoot&#125;&quot;,</span><br><span class="line">        &quot;program&quot;: &quot;$&#123;file&#125;&quot;,</span><br><span class="line">        &quot;stopOnEntry&quot;: true,</span><br><span class="line">        &quot;console&quot;: &quot;integratedTerminal&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<strong>go.json</strong>:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;configurations&quot;: &#123;</span><br><span class="line">    &quot;run&quot;: &#123;</span><br><span class="line">        &quot;adapter&quot;: &quot;vscode-go&quot;,</span><br><span class="line">        &quot;configuration&quot;: &#123;</span><br><span class="line">        &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">        &quot;program&quot;: &quot;$&#123;fileDirname&#125;&quot;,</span><br><span class="line">        &quot;mode&quot;: &quot;debug&quot;,</span><br><span class="line">        &quot;dlvToolPath&quot;: &quot;$HOME&#x2F;go&#x2F;bin&#x2F;dlv&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>简单的使用方式:<br>生成vimspector.json配置文件后<br>通过:<code>call vimspector#xxxx</code> 调用具体的函数 包括打断点,下一步,添加监控变量等等  </li>
</ol>
<p><strong>参考文件</strong>:<br><a href="https://blog.csdn.net/AI_Fanatic/article/details/104923610">https://blog.csdn.net/AI_Fanatic/article/details/104923610</a><br><a href="https://github.com/theniceboy/nvim/blob/master/init.vim">https://github.com/theniceboy/nvim/blob/master/init.vim</a>  </p>
]]></content>
      <tags>
        <tag>neovim,vimspector,fzf</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac系统常用软件配置记录</title>
    <url>/2021/01/06/Mac%E7%B3%BB%E7%BB%9F%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h4 id="nvALT-随叫随到随处用的Mac速记工具"><a href="#nvALT-随叫随到随处用的Mac速记工具" class="headerlink" title="nvALT - 随叫随到随处用的Mac速记工具"></a>nvALT - 随叫随到随处用的Mac速记工具</h4><h4 id="unclutter-藏在顶栏的便签、临时文件、剪切板记录器三合一工具"><a href="#unclutter-藏在顶栏的便签、临时文件、剪切板记录器三合一工具" class="headerlink" title="unclutter - 藏在顶栏的便签、临时文件、剪切板记录器三合一工具"></a>unclutter - 藏在顶栏的便签、临时文件、剪切板记录器三合一工具</h4><h4 id="安装v2ray命令行代理工具和qv2ray图形界面工具"><a href="#安装v2ray命令行代理工具和qv2ray图形界面工具" class="headerlink" title="安装v2ray命令行代理工具和qv2ray图形界面工具"></a>安装v2ray命令行代理工具和qv2ray图形界面工具</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew install v2ray  </span><br><span class="line">brew install qv2ray  </span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/wppro85/blog_img@main/images/20210106-v2U9yi.png" alt="20210106-v2U9yi"></p>
<h4 id="几个重要的配置文件"><a href="#几个重要的配置文件" class="headerlink" title="几个重要的配置文件"></a>几个重要的配置文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.zshrc</span><br><span class="line">.tmux.conf</span><br><span class="line">.vimrc init.vim</span><br></pre></td></tr></table></figure>
<h4 id="Mac系下解决neovim输入中文后-退出插入模式后自动切换成英文输入法"><a href="#Mac系下解决neovim输入中文后-退出插入模式后自动切换成英文输入法" class="headerlink" title="Mac系下解决neovim输入中文后 退出插入模式后自动切换成英文输入法"></a>Mac系下解决neovim输入中文后 退出插入模式后自动切换成英文输入法</h4><p>参考内容:<a href="https://github.com/hiberabyss/smartim">https://github.com/hiberabyss/smartim</a><br>但是对于我的VIM和MAC来说还有两步需要设置<br>1.把im-select拷贝到/usr/local/bin<br><code>sudo cp ~/.vim/plugged/smartim/plugin/im-select /usr/local/bin/</code><br>确保在终端下可以直接使用im-select<br>2.修改lin.vim的配置<br><code>nvim ~/.vim/user.vim</code><br>加入以下内容:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot; 13. im-select配置</span><br><span class="line">let g:smartim_default &#x3D; &#39;com.apple.keylayout.ABC&#39;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <tags>
        <tag>Mac,Soft,profile,config</tag>
      </tags>
  </entry>
</search>
