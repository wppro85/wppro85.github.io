{"meta":{"title":"证券小兵的技术与业务记录","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"neovim插件","slug":"neovim插件","date":"2021-01-11T14:34:18.000Z","updated":"2021-01-11T15:53:11.347Z","comments":true,"path":"2021/01/11/neovim插件/","link":"","permalink":"http://example.com/2021/01/11/neovim%E6%8F%92%E4%BB%B6/","excerpt":"","text":"vimspector插件安装 修改~/.vim/setting-vim/vim-plug.vim文件,增加以下内容:123&quot; VimSpectorPlug &#39;puremourning&#x2F;vimspector&#39;, &#123;&#39;do&#39;:&#39;.&#x2F;install_gadget.py --enable-python --enable-go --enable-bash&#39;&#125;Plug &#39;junegunn&#x2F;fzf&#39;, &#123;&#39;dir&#39;: &#39;~&#x2F;.vim&#x2F;plugged&#x2F;fzf&#39;, &#39;do&#39;: &#39;.&#x2F;install --all&#39; &#125; 修改~/.vim/user.vim文件，增加以下内容:123456789101112131415&quot; 12.Vimspector&quot; let g:vimspector_enable_mappings &#x3D; &#39;HUMAN&#39;function! s:read_template_into_buffer(template) &quot; has to be a function to avoid the extra space fzf#run insers otherwise execute &#39;0r ~&#x2F;.vim&#x2F;vimspector_json&#x2F;&#39;.a:templateendfunctioncommand! -bang -nargs&#x3D;* LoadVimSpectorJsonTemplate call fzf#run(&#123; \\ &#39;source&#39;: &#39;ls -1 ~&#x2F;.vim&#x2F;vimspector_json&#39;, \\ &#39;down&#39;: 20, \\ &#39;sink&#39;: function(&#39;&lt;sid&gt;read_template_into_buffer&#39;) \\ &#125;)noremap &lt;leader&gt;vs :tabe .vimspector.json&lt;CR&gt;:LoadVimSpectorJsonTemplate&lt;CR&gt;sign define vimspectorBP text&#x3D;☛ texthl&#x3D;Normalsign define vimspectorBPDisabled text&#x3D;☞ texthl&#x3D;Normalsign define vimspectorPC text&#x3D;🔶 texthl&#x3D;SpellBad 这段主要是vimspector配置设置我没使用默认快捷键映射方案’HUMAN’或者’VISUAL_STUDIO’，F5等功能键键位在lin.vim已经有定义了 通过使用 ‘leader + vs’ 选择对应的模板文件在需要调试的文件夹下生成对应的配置文件 这里需要在~/.vim/下新建vimspector_json文件夹，配置bash,python,go对应的模板文件python.json:123456789101112131415161718192021222324252627282930313233343536373839404142&#123; &quot;adapters&quot;: &#123; &quot;debugpy&quot;: &#123; &quot;command&quot;: [&quot;python&quot;, &quot;-m&quot;, &quot;debugpy.adapter&quot;], &quot;name&quot;: &quot;debugpy&quot;, &quot;configuration&quot;: &#123; &quot;python&quot;: &quot;python&quot; &#125; &#125; &#125;, &quot;configurations&quot;: &#123; &quot;run - debugpy&quot;: &#123; &quot;adapter&quot;: &quot;debugpy&quot;, &quot;configuration&quot;: &#123; &quot;request&quot;: &quot;launch&quot;, &quot;type&quot;: &quot;python&quot;, &quot;cwd&quot;: &quot;$&#123;workspaceRoot&#125;&quot;, &quot;program&quot;: &quot;$&#123;file&#125;&quot;, &quot;stopOnEntry&quot;: true, &quot;console&quot;: &quot;integratedTerminal&quot; &#125;, &quot;breakpoints&quot;: &#123; &quot;exception&quot;: &#123; &quot;raised&quot;: &quot;N&quot;, &quot;uncaught&quot;: &quot;&quot; &#125; &#125; &#125; &#125;&#125; shell.json:12345678910111213141516&#123; &quot;configurations&quot;: &#123; &quot;run&quot;: &#123; &quot;adapter&quot;: &quot;vscode-bash&quot;, &quot;configuration&quot;: &#123; &quot;type&quot;: &quot;shell&quot;, &quot;request&quot;: &quot;launch&quot;, &quot;cwd&quot;: &quot;$&#123;workspaceRoot&#125;&quot;, &quot;program&quot;: &quot;$&#123;file&#125;&quot;, &quot;stopOnEntry&quot;: true, &quot;console&quot;: &quot;integratedTerminal&quot; &#125; &#125; &#125;&#125; go.json:1234567891011121314&#123; &quot;configurations&quot;: &#123; &quot;run&quot;: &#123; &quot;adapter&quot;: &quot;vscode-go&quot;, &quot;configuration&quot;: &#123; &quot;request&quot;: &quot;launch&quot;, &quot;program&quot;: &quot;$&#123;fileDirname&#125;&quot;, &quot;mode&quot;: &quot;debug&quot;, &quot;dlvToolPath&quot;: &quot;$HOME&#x2F;go&#x2F;bin&#x2F;dlv&quot; &#125; &#125; &#125;&#125; 简单的使用方式:生成vimspector.json配置文件后通过:call vimspector#xxxx 调用具体的函数 包括打断点,下一步,添加监控变量等等 参考文件:https://blog.csdn.net/AI_Fanatic/article/details/104923610https://github.com/theniceboy/nvim/blob/master/init.vim","categories":[],"tags":[{"name":"neovim,vimspector,fzf","slug":"neovim-vimspector-fzf","permalink":"http://example.com/tags/neovim-vimspector-fzf/"}]},{"title":"Mac系统常用软件配置记录","slug":"Mac系统常用软件配置记录","date":"2021-01-06T00:43:01.000Z","updated":"2021-01-07T15:05:28.041Z","comments":true,"path":"2021/01/06/Mac系统常用软件配置记录/","link":"","permalink":"http://example.com/2021/01/06/Mac%E7%B3%BB%E7%BB%9F%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/","excerpt":"","text":"nvALT - 随叫随到随处用的Mac速记工具unclutter - 藏在顶栏的便签、临时文件、剪切板记录器三合一工具安装v2ray命令行代理工具和qv2ray图形界面工具12brew install v2ray brew install qv2ray 几个重要的配置文件123.zshrc.tmux.conf.vimrc init.vim Mac系下解决neovim输入中文后 退出插入模式后自动切换成英文输入法参考内容:https://github.com/hiberabyss/smartim但是对于我的VIM和MAC来说还有两步需要设置1.把im-select拷贝到/usr/local/binsudo cp ~/.vim/plugged/smartim/plugin/im-select /usr/local/bin/确保在终端下可以直接使用im-select2.修改lin.vim的配置nvim ~/.vim/user.vim加入以下内容:12&quot; 13. im-select配置let g:smartim_default &#x3D; &#39;com.apple.keylayout.ABC&#39;","categories":[],"tags":[{"name":"Mac,Soft,profile,config","slug":"Mac-Soft-profile-config","permalink":"http://example.com/tags/Mac-Soft-profile-config/"}]},{"title":"关于markdown-preview.nvim安装失败的解决方法","slug":"关于markdown-preview-nvim安装失败的解决方法","date":"2021-01-05T14:04:51.000Z","updated":"2021-01-07T15:05:28.041Z","comments":true,"path":"2021/01/05/关于markdown-preview-nvim安装失败的解决方法/","link":"","permalink":"http://example.com/2021/01/05/%E5%85%B3%E4%BA%8Emarkdown-preview-nvim%E5%AE%89%E8%A3%85%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/","excerpt":"","text":"mac下采用了官方的配置文件进行安装a,即使挂了代理也无法安装成功Plug &#39;iamcco/markdown-preview.nvim&#39;, &#123; &#39;do&#39;: &#39;cd app &amp;&amp; yarn install&#39; &#125; 经过排查mac一开始没有安装yarn,尝试了brew install yarn 安装后依然无法安装成功markdown-preview,等待时间较长,尝试了以下方法: 克隆完成后,进入plugin目录1yarn install 使用终端代理proxychains4 启动nvim 挂代理安装插件12proxychains4 nvim PlugInstall 安装后成功,再次启动nvim打开markdown文件:MarkdownPreview可以正常启动浏览器进行预览了","categories":[],"tags":[{"name":"vim,neovim,markdown","slug":"vim-neovim-markdown","permalink":"http://example.com/tags/vim-neovim-markdown/"}]},{"title":"安装i3版本manjaro的安装记录","slug":"i3-manjaro安装过程问题记录","date":"2021-01-05T11:42:27.000Z","updated":"2021-09-07T13:42:42.897Z","comments":true,"path":"2021/01/05/i3-manjaro安装过程问题记录/","link":"","permalink":"http://example.com/2021/01/05/i3-manjaro%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/","excerpt":"","text":"解决外接机械键盘功能键区无法使用的问题参考文件:How to swap the “fn” use of Function keys on an Apple Keyboard in Linuxhttps://superuser.com/questions/79822/how-to-swap-the-fn-use-of-function-keys-on-an-apple-keyboard-in-linux1echo 0 &gt; &#x2F;sys&#x2F;module&#x2F;hid_apple&#x2F;parameters&#x2F;fnmodeOr, in case of permission issue:echo 0 | sudo tee /sys/module/hid_apple/parameters/fnmode This will prevent you from having to reboot. Adding the option is a good idea, so the change persists through reboots.0 = Fn key disabled1 = Fn key pressed by default2 = Fn key released by defaultFrom /drivers/hid/hid-apple.c line 42: Mode of fn key on Apple keyboards (0 = disabled, [1] = fkeyslast, 2 = fkeysfirst) his worked for me on Fedora 24 Create a new file for SystemD to start.gedit /usr/lib/systemd/system/mac-keyboard.serviceEnsure the file contains the following123456789[Unit] Description&#x3D;mac-keyboard[Service] Type&#x3D;oneshot ExecStart&#x3D;&#x2F;bin&#x2F;sh -c &quot;echo 2 &gt; &#x2F;sys&#x2F;module&#x2F;hid_apple&#x2F;parameters&#x2F;fnmode&quot; ExecStop&#x3D;&#x2F;bin&#x2F;sh -c &quot;echo 1 &gt; &#x2F;sys&#x2F;module&#x2F;hid_apple&#x2F;parameters&#x2F;fnmode&quot; RemainAfterExit&#x3D;yes[Install] WantedBy&#x3D;multi-user.target Reload SystemD to read your new filesystemctl --system daemon-reload Start the SystemD service.systemctl start mac-keyboard.service Enable service to start on boot.systemctl enable mac-keyboard.serviceReference: https://www.dalemacartney.com/2013/06/14/changing-the-default-function-key-behaviour-in-fedora/ 按照文件选择 1echo 2 | sudo tee &#x2F;sys&#x2F;module&#x2F;hid_apple&#x2F;parameters&#x2F;fnmode 开启F区标准键盘功能mod+z 选择 manjaro setting manager键盘布局选择apple,功能键就可以正常使用了(我这里使用的k2键盘有mac的键盘布局模式) 解决蓝牙链接问题参考文件:https://www.cnblogs.com/lirenhe/p/12716395.htmlhttps://blog.csdn.net/github_39664893/article/details/88758120 科学上网方案v2ray 命令行工具 安装方式:sudo pacman -S v2rayQv2ray 图形化支持订阅 安装方式:yay -S Qv2ray终端代理工具proxychains 安装方式:sudo pacman -S proxychins修改proxychains配置文件:sudo vim /etc/proxychains.conf修改以下内容:socks4 127.0.0.1 1089(根据v2ray 配置情况 默认1089端口) HDMI没有声音的问题https://wiki.archlinux.org/index.php/PulseAudio/Examples#Overview_of_the_targeted_PulseAudio_configuration HDMI output configuration的相关部分aplay -D plughw:1,3 /usr/share/sounds/alsa/Front_Right.wav Manually configuring PulseAudio to detect the Nvidia HDMIHaving identified which HDMI device is working, PulseAudio can be forced to use it via an edit to /etc/pulse/default.pa:# load-module module-alsa-sink device=hw:1,7where the 1 is the card and the 7 is the device found to work in the previous section restart pulse audio12$ pulseaudio -k$ pulseaudio --start Automatically switch audio to HDMICreate a script to switch to the desired audio profile if an HDMI cable is plugged in:1234567891011121314151617181920212223242526272829&#x2F;usr&#x2F;local&#x2F;bin&#x2F;hdmi_sound_toggle.sh#!&#x2F;bin&#x2F;bashexport PATH&#x3D;&#x2F;usr&#x2F;binUSER_NAME&#x3D;$(who | awk -v vt&#x3D;tty$(fgconsole) &#39;$0 ~ vt &#123;print $1&#125;&#39;)USER_ID&#x3D;$(id -u &quot;$USER_NAME&quot;)CARD_PATH&#x3D;&quot;&#x2F;sys&#x2F;class&#x2F;drm&#x2F;card0&#x2F;&quot;AUDIO_OUTPUT&#x3D;&quot;analog-surround-40&quot;PULSE_SERVER&#x3D;&quot;unix:&#x2F;run&#x2F;user&#x2F;&quot;$USER_ID&quot;&#x2F;pulse&#x2F;native&quot;for OUTPUT in $(cd &quot;$CARD_PATH&quot; &amp;&amp; echo card*); do OUT_STATUS&#x3D;$(&lt;&quot;$CARD_PATH&quot;&#x2F;&quot;$OUTPUT&quot;&#x2F;status) if [[ $OUT_STATUS &#x3D;&#x3D; connected ]] then echo $OUTPUT connected case &quot;$OUTPUT&quot; in &quot;card0-HDMI-A-1&quot;) AUDIO_OUTPUT&#x3D;&quot;hdmi-stereo&quot; # Digital Stereo (HDMI 1) ;; &quot;card0-HDMI-A-2&quot;) AUDIO_OUTPUT&#x3D;&quot;hdmi-stereo-extra1&quot; # Digital Stereo (HDMI 2) ;; esac fidoneecho selecting output $AUDIO_OUTPUTsudo -u &quot;$USER_NAME&quot; pactl --server &quot;$PULSE_SERVER&quot; set-card-profile 0 output:$AUDIO_OUTPUT+input:analog-stereoMake the script executable:chmod +x /usr/local/bin/hdmi_sound_toggle.shCreate a udev rule to run this script when the status of the HDMI change:12&#x2F;etc&#x2F;udev&#x2F;rules.d&#x2F;99-hdmi_sound.rulesKERNEL&#x3D;&#x3D;&quot;card0&quot;, SUBSYSTEM&#x3D;&#x3D;&quot;drm&quot;, ACTION&#x3D;&#x3D;&quot;change&quot;, RUN+&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;hdmi_sound_toggle.sh&quot;To make the change effective don’t forget to reload the udev rules:udevadm control --reload-rulesA reboot might be required. 中文显示问题当前最新版本(manjaro-i3-20.0-200426-linux56)在安装时中文无法正常显示，可以选择英文提示安装，我是选择的中文，然后看着一堆方块猜着输入信息，然后点下一步下一步完成的．安装完成后首次进入系统，你会发现桌面右上角日历上显示的＂x月,星期x”的中文字符显示为方块，你需要修改配置文件/usr/share/conky/conky_maia把其中默认的字体＂Bitstream Vera＂改为＂anti＂还有浏览器的标题或其他软件显示中文还会有问题，这时就需要安装新的中文字体解决 安装完你发现conky貌似有口口口这样的缺少字体/usr/share/conky/conky_maia #桌面右侧的状态栏/usr/share/conky/conky1.10_shortcuts_maia #桌面左侧的快捷键显示栏修改conky_maia支持中文font = &#39;WenQuanYi Micro Hei:size=8&#39;,或者font = &#39;WenQuanYi Zen Hei:size=8&#39;,vim打开可以用以下命令直接替换:%s/Bitstrea‘m Vera/WenQuanYi Micro Hei/ 修改键盘映射xmodmap -pke -&gt; ·/.xmodmap 输出键盘每个键位对应的xevxmodmap ~/.xmodmap配置和文件 需要在 i3 config文件中添加123exec_always sleep1; xmodmap ~&#x2F;.xmodmapexec_always varietyexec_always compton fzf 模糊文件1export FZF_DEFAULT_OPTS&#x3D;&quot;--height 40% --layout&#x3D;reverse --preview &#39;(highlight -O ansi &#123;&#125; || cat &#123;&#125;) 2&gt; &#x2F;dev&#x2F;null | head -500&#39;&quot; lin.vim1git clone https:&#x2F;&#x2F;github.com&#x2F;linrongbin16&#x2F;lin.vim ~&#x2F;.vim &amp;&amp; cd ~&#x2F;.vim &amp;&amp; .&#x2F;install.sh tmux环境中nvim checkhealth 检查问题解决方式在 macOS 中，我们iTerm2中的 terminal color 一般都设置为xterm-256color，这没毛病，但问题是它不能在 tmux 环境中使用:$TERM should be &quot;screen-256color&quot; or &quot;tmux-256color&quot; in tmux. Colors might look wrong. 为此，我们可以在zshrc中加上这样一段配置： 12345if [[ $TMUX !&#x3D; &quot;&quot; ]] thenexport TERM&#x3D;&quot;tmux-256color&quot;elseexport TERM&#x3D;&quot;xterm-256color&quot;fi 而在 tmux 环境中一般默认使用系统自带的screen-256color，这在大多数情况是够用的，但是它不支持任何斜体字体样式，所以在 Vim 中类似代码高亮这种就会很有问题。为此，我们可以在tmux.conf中加上设置： 12set -g default-terminal &quot;tmux-256color&quot;set-option -a terminal-overrides &quot;,*256col*:RGB&quot; 小工具下载：t-get (命令行工具， npm install -g t-get)虚拟机：VirtualBox模拟器：qemu, bochs快速跳转工具: z一个目录跳转工具，相当于加强版的cd，首先去戳这里下载，是一个脚本，接着添加到~/.zshrc中： 开发工具配置https://zhuanlan.zhihu.com/p/139388970 Linux终端PATH配置方式zsh,bash添加环境变量:12nvim ~&#x2F;.zshrcnvim ~&#x2F;.bashrc 添加以下内容:export PATH=$PATH:~/hexo/node_modules/.bin fish添加环境变量参考内容: https://stackoverflow.com/questions/26208231/modifying-path-with-fish-shellset -U fish_user_paths ~/hexo/node_modules/.bin $fish_user_paths google-chrome浏览器无法在manjaro下设置代理Firefox,可以设置全局代理,通过qv2ray进行代理即可正常访问googleChrome、Chromium无法设置系统代理,必须通过插件或者命令行 方式一:通过命令行启动代理上网 google-chrome-stable --proxy-server=socks5://127.0.0.1:1089方式二:通过switchy omega插件进行科学上网 通过github下载google-access 谷访访问助手破解手,启动插件,登陆同步 同步Chrome浏览器插件(包括proxy switchy omega) SwitchyOmega设置:123456789101112131415 网址协议:(默认) 代理方式SOCKS 代理服务器:127.0.0.1 代理端口:1089&#96;&#96;&#96; PAC规则在Qv2ray进行设置,一开始两种方式都报错,始终不能代理访问成功. 最终发现是**本地时间**不对,调整完成后就正常了. #### 蓝牙配对失败的问题 手动命令行配对Manjaro默认的蓝牙总会有点小问题！所以在安装好Manjaro后如下设置下： 一、安装 基本的包 &#96;&#96;&#96;pacman -S bluez bluez-utils&#96;&#96;&#96; 与音频有关的包 pacman -S pulseaudio-bluetooth pavucontrol pulseaudio-alsa pulseaudio-bluetooth-a2dp-gdm-fix1二、修改设置 sudo nano /etc/bluetooth/main.conf123456789修改FastConnectable&#x3D;false，取消#注释，改为FastConnectable&#x3D;true 修改AutoEnable&#x3D;false，去掉前面的#注释，改为AutoEnable&#x3D;true重启！！！三、连接蓝牙设备 不知道为什么Manjaro下的配对码显示不出来，所以我们的控制台下进行连接配对操作： 1、进入蓝牙控制台 &#96;bluetoothctl&#96; 2、打开相关项 power onagent ondefault-agent`3、扫描蓝牙设备scan on4、根据上面来找出来的蓝牙MAC码，对设备配对pair 键盘的MAC地址（可用TAB自动出来）屏幕可能会输出类似于以下的信息： [agent] Passkey: xxxxxx这时候在你的蓝牙键盘上输入6位配对码后再回车即可完成配对！5、设备信任设备trust 键盘的MAC地址6、连接设备connect 键盘的MAC地址https://peng.likehere.me/index.php/archives/41/ K380蓝牙键盘连接到manjaroF键功能设置默功能https://github.com/jergusg/k380-function-keys-conf 关于efi和grub启动失败修复的问题参考文件:Manjaro UEFI 启动修复https://blog.mynoee.com/archives/146/修复UEFI模式下Manjaro Linux启动问题https://blog.csdn.net/weixin_30826761/article/details/97554989UEFI - Install Guidehttps://serverfault.com/questions/3132/how-do-i-find-the-uuid-of-a-filesystemHow do I find the UUID of a filesystemhttps://serverfault.com/questions/3132/how-do-i-find-the-uuid-of-a-filesystem","categories":[],"tags":[{"name":"i3,manjaro","slug":"i3-manjaro","permalink":"http://example.com/tags/i3-manjaro/"}]},{"title":"hexo博客搭建记录","slug":"hexo博客搭建记录","date":"2021-01-04T16:00:30.000Z","updated":"2021-05-15T15:56:01.697Z","comments":true,"path":"2021/01/05/hexo博客搭建记录/","link":"","permalink":"http://example.com/2021/01/05/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/","excerpt":"","text":"安装hexo完成初始化配置安装Nodejsnode -v #查看node版本npm -v #查看npm版本npm install -g cnpm --registry=http://registry.npm.taobao.org #安装淘宝的cnpm 管理器cnpm -v # 查看cnpm版本cnpm install -g hexo-cli #安装hexo框架hexo -v #查看hexo版本mkdir blog #创建blog目录cd blog #进入blog目录sudo hexo init #生成博客 初始化博客hexo s #启动本地博客服务http://localhost:4000/ #本地访问地址hexo n &quot;我的第一篇文章&quot; #创建新的文章 返回blog目录hexo clean #清理hexo g #生成 Github创建一个新的仓库 YourGithubName.github.iocnpm install --save hexo-deployer-git #在blog目录下安装git部署插件 配置_config.yml123456# Deployment## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html deploy: type: git repo: https:&#x2F;&#x2F;github.com&#x2F;YourGithubName&#x2F;YourGithubName.github.io.git branch: master hexo d #部署到Github仓库里https://YourGithubName.github.io/ #访问这个地址可以查看博客 配置next主题git clone https://github.com/iissnan/hexo-theme-next.git themes/next #下载next主题到本地,这个主题直接带全文内容搜索,界面比较简洁 #修改hexo根目录下的 _config.yml 文件 ： theme: next hexo c #清理一下hexo g #生成hexo d #部署到远程Github仓库https://YourGithubName.github.io/ #查看博客 uPic图床设置 token添加关于阿里云域名解析的设置 阿里云上这样设置(更新时间还是比较长的 一开始ping域名ping不同,后来还是ping不同,但是访问正常,以为设置不对,也不知道怎么处理,直接放了一天自动就好了,访问正常,域名定向也正常) github进入项目页面 选择Settings 项目目录下会自动生成CNAME文件,内容就是绑定的域名 这里需要注意本地blog(hexo项目)文件夹下 必须在source目录(不是source/_posts目录)下保持CNAME文件与github一致,否则每次更新都会删除 github的CNAME文件,造成域名定向失败. 通过github多设备管理hexo内容参考文件: https://blog.csdn.net/u014568993/article/details/84308188 https://www.jianshu.com/p/0558c041e56d hexo new #撰写博客 hexo s -g （本地查看是否正常） hexo d （将本地文件push到master分支上） hexo clean(清除不必要文件) git add .、 git commit -m “comment” 、 git push （将hexog分支保存为最新状态） 这里正好有个配置的问题一并记录：我是用的manjaro i3系统 终端使用了fish 和zsh 默认fishgit clone成功以后,无法直接使用hexo命令，经过查询应该将~/hexo/node_modules/.bin目录加入PATH zsh,bash添加环境变量:12nvim ~&#x2F;.zshrcnvim ~&#x2F;.bashrc 添加以下内容:export PATH=$PATH:~/hexo/node_modules/.bin fish添加环境变量参考内容: https://stackoverflow.com/questions/26208231/modifying-path-with-fish-shellset -U fish_user_paths ~/hexo/node_modules/.bin $fish_user_paths 新的设备hexo clean 和hexo d有两个错误 通过删除 ~/hexo/node_modules目录，重新安装相关依赖解决123456789101112131415npm install hexo-generator-index --savenpm install hexo-generator-archive --savenpm install hexo-generator-category --savenpm install hexo-generator-tag --savenpm install hexo-server --savenpm install hexo-deployer-git --savenpm install hexo-deployer-heroku --savenpm install hexo-deployer-rsync --savenpm install hexo-deployer-openshift --savenpm install hexo-renderer-marked@0.2 --savenpm install hexo-renderer-stylus@0.2 --savenpm install hexo-generator-feed@1 --savenpm install hexo-generator-sitemap@1 --savenpm install hexo-generator-search --savenpm install hexo-generator-searchdb --save 当出现类似下面的信息时，直接删除.deploy_git文件夹，然后执行hexo d即可，其会重新生成的。123456INFO Deploying: gitINFO Clearing .deploy_git folder...INFO Copying files from public folder...fatal: 位于未检出的子模组 &#39;.deploy_git&#39;Maybe you can find the solution here: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;troubleshooting.html... ... 删除后提示 找不到有效的邮箱、用户名:通过一下命令设置全局的用户名 邮箱 12git config --global user.name [username]git config --global user.email [email] 每次提交还需要输入github用户名和密码：通过以下命令进行修改12echo &quot;[credential]&quot; &gt;&gt; .git&#x2F;configecho &quot; helper &#x3D; store&quot; &gt;&gt; .git&#x2F;config或者直接修改.git/config文件1234567891011121314##修改成如下[core] repositoryformatversion &#x3D; 0 filemode &#x3D; true bare &#x3D; false logallrefupdates &#x3D; true[remote &quot;origin&quot;] url &#x3D; https:&#x2F;&#x2F;github.com&#x2F;wppro85&#x2F;wppro85.github.io.git fetch &#x3D; +refs&#x2F;heads&#x2F;*:refs&#x2F;remotes&#x2F;origin&#x2F;*[branch &quot;hexo&quot;] remote &#x3D; origin merge &#x3D; refs&#x2F;heads&#x2F;hexo[credential] helper &#x3D; store我这次使用了hexo目录下的.git配置是无效的,然后使用了全局的修改后才可以免输入用户名密码 设置全局的方式:1git config --global credential.helper store 或者修改用户目录下的.gitconfig文件:12[credential] helper &#x3D; sotre 参考内容:https://www.bilibili.com/video/BV1Yb411a7tyhttps://zhuanlan.zhihu.com/p/138012354https://blog.svend.cc/upic/tutorials/github/","categories":[],"tags":[{"name":"hexo,github,upic,阿里云域名","slug":"hexo-github-upic-阿里云域名","permalink":"http://example.com/tags/hexo-github-upic-%E9%98%BF%E9%87%8C%E4%BA%91%E5%9F%9F%E5%90%8D/"}]}],"categories":[],"tags":[{"name":"neovim,vimspector,fzf","slug":"neovim-vimspector-fzf","permalink":"http://example.com/tags/neovim-vimspector-fzf/"},{"name":"Mac,Soft,profile,config","slug":"Mac-Soft-profile-config","permalink":"http://example.com/tags/Mac-Soft-profile-config/"},{"name":"vim,neovim,markdown","slug":"vim-neovim-markdown","permalink":"http://example.com/tags/vim-neovim-markdown/"},{"name":"i3,manjaro","slug":"i3-manjaro","permalink":"http://example.com/tags/i3-manjaro/"},{"name":"hexo,github,upic,阿里云域名","slug":"hexo-github-upic-阿里云域名","permalink":"http://example.com/tags/hexo-github-upic-%E9%98%BF%E9%87%8C%E4%BA%91%E5%9F%9F%E5%90%8D/"}]}